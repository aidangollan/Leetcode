from collections import deque

def minNumberOfJumps(array):
    # node = (# jumps, idx, steps to get there)
    seen = set((array[0], 0))
    nodes = deque()
    nodes.append((array[0], 0, 0))
    """
    # Loop through 'children' of nodes
    # if not seen add to front of nodes
    # if seen skip over
    # preform BST on nodes
    """
    while nodes:
        node = nodes.popleft()
        if node[1] == len(array) - 1:
            return node[2]
        # explore all of node's children
        for i in range(1, node[0] + 1):
            if node[1] + i >= len(array):
                continue
            new_val = array[node[1] + i]
            new_idx = node[1] + i
            new_steps = node[2] + 1
            if (new_val, new_idx) not in seen:
                seen.add((new_val, new_idx))
                nodes.append((new_val, new_idx, new_steps))
